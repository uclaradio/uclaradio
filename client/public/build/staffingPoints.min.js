webpackJsonp(
  [6],
  {
    725: function(e, t, a) {
      'use strict';
      function l(e) {
        return e && e.__esModule ? e : { default: e };
      }
      var r = a(0),
        n = l(r),
        s = a(13),
        u = l(s),
        d = n.default.createClass({
          displayName: 'NameFilter',
          updateFilterName: function() {
            this.props.handleFilterChange({
              nameFilte√ßr: this.refs.nameFilterInput.value,
            });
          },
          render: function() {
            return n.default.createElement(
              'div',
              { className: 'form-group' },
              n.default.createElement('h3', null, 'Name'),
              n.default.createElement('input', {
                type: 'text',
                name: 'fullName',
                defaultValue: this.props.nameFilter,
                className: 'form-control',
                onChange: this.updateFilterName,
                ref: 'nameFilterInput',
              })
            );
          },
        }),
        i = n.default.createClass({
          displayName: 'DateFilter',
          updateFilterDate: function() {
            this.props.handleFilterChange({
              beginDateFilter: new Date(
                this.refs.beginDateInput.value.replace(/-/g, '/')
              ),
              endDateFilter: new Date(
                this.refs.endDateInput.value.replace(/-/g, '/')
              ),
            });
          },
          convertDateToHTMLFormat: function(e) {
            var t = e.getFullYear(),
              a = e.getMonth() + 1;
            (a += ''), 1 === a.length && (a = '0' + a);
            var l = '' + e.getDate();
            return 1 === l.length && (l = '0' + l), t + '-' + a + '-' + l;
          },
          render: function() {
            return n.default.createElement(
              'div',
              { className: 'form-group' },
              n.default.createElement('h3', null, 'Date'),
              n.default.createElement('input', {
                type: 'date',
                name: 'beginDate',
                defaultValue: this.convertDateToHTMLFormat(
                  this.props.beginDate
                ),
                className: 'form-control',
                onChange: this.updateFilterDate,
                ref: 'beginDateInput',
              }),
              n.default.createElement('input', {
                type: 'date',
                name: 'endDate',
                defaultValue: this.convertDateToHTMLFormat(this.props.endDate),
                className: 'form-control',
                onChange: this.updateFilterDate,
                ref: 'endDateInput',
              })
            );
          },
        }),
        o = n.default.createClass({
          displayName: 'StatusFilter',
          updateFilterStatus: function() {
            this.props.handleFilterChange({
              statusFilter: this.refs.statusInput.value,
            });
          },
          render: function() {
            return n.default.createElement(
              'div',
              { className: 'form-group' },
              n.default.createElement('h3', null, 'Point Status'),
              n.default.createElement(
                'select',
                {
                  name: 'point_status',
                  className: 'form-control',
                  defaultValue: 'all',
                  onChange: this.updateFilterStatus,
                  ref: 'statusInput',
                },
                n.default.createElement('option', { value: 'all' }, 'Any'),
                n.default.createElement(
                  'option',
                  { value: 'pending' },
                  'Pending'
                ),
                n.default.createElement(
                  'option',
                  { value: 'approved' },
                  'Approved'
                ),
                n.default.createElement(
                  'option',
                  { value: 'denied' },
                  'Denied'
                ),
                n.default.createElement(
                  'option',
                  { value: 'canceled' },
                  'Canceled'
                )
              )
            );
          },
        }),
        p = n.default.createClass({
          displayName: 'DepartmentFilter',
          updateFilterDepartment: function() {
            this.props.handleFilterChange({
              departmentFilter: this.refs.departmentInput.value,
            });
          },
          render: function() {
            return n.default.createElement(
              'div',
              { className: 'form-group' },
              n.default.createElement('h3', null, 'Department'),
              n.default.createElement(
                'select',
                {
                  name: 'department',
                  className: 'form-control',
                  defaultValue: 'all',
                  onChange: this.updateFilterDepartment,
                  ref: 'departmentInput',
                },
                n.default.createElement('option', { value: 'all' }, 'All'),
                n.default.createElement(
                  'option',
                  { value: 'artanddesign' },
                  'Art & Design'
                ),
                n.default.createElement(
                  'option',
                  { value: 'digitalpress' },
                  'Digital Press '
                ),
                n.default.createElement(
                  'option',
                  { value: 'comedy' },
                  'Comedy'
                ),
                n.default.createElement(
                  'option',
                  { value: 'events' },
                  'Events'
                ),
                n.default.createElement(
                  'option',
                  { value: 'fundraising' },
                  'Fundraising'
                ),
                n.default.createElement(
                  'option',
                  { value: 'marketing' },
                  'Marketing'
                ),
                n.default.createElement('option', { value: 'music' }, 'Music'),
                n.default.createElement('option', { value: 'news' }, 'News '),
                n.default.createElement(
                  'option',
                  { value: 'photo' },
                  'Photo/Video'
                ),
                n.default.createElement(
                  'option',
                  { value: 'productions' },
                  'Productions'
                ),
                n.default.createElement(
                  'option',
                  { value: 'programming' },
                  'Programming'
                ),
                n.default.createElement(
                  'option',
                  { value: 'promotions' },
                  'Promotions'
                ),
                n.default.createElement(
                  'option',
                  { value: 'sports' },
                  'Sports'
                ),
                n.default.createElement('option', { value: 'web' }, 'Web'),
                n.default.createElement(
                  'option',
                  { value: 'interns' },
                  'Interns'
                )
              )
            );
          },
        }),
        c = n.default.createClass({
          displayName: 'StaffingPointsRow',
          updateStatus: function(e) {
            var t = this.props.record._id,
              a = this.props.password,
              l = this.refs.managerNotes.value,
              r = this.props.ajaxUpdateStatus;
            $.post(
              'view/update',
              { userId: t, status: e, managerNotes: l, password: a },
              function(a) {
                r(a, e, t);
              }
            );
          },
          render: function() {
            return n.default.createElement(
              'tr',
              null,
              n.default.createElement('td', null, this.props.record.fullName),
              n.default.createElement('td', null, this.props.record.number),
              n.default.createElement(
                'td',
                null,
                this.props.record.description
              ),
              n.default.createElement('td', null, this.props.record.department),
              n.default.createElement(
                'td',
                null,
                this.props.record.dateCompleted.toDateString()
              ),
              n.default.createElement('td', null, this.props.record.notes),
              n.default.createElement('td', null, this.props.record.status),
              n.default.createElement(
                'td',
                { onClick: this.updateStatus.bind(null, 'approved') },
                n.default.createElement('button', null, 'Approve')
              ),
              n.default.createElement(
                'td',
                { onClick: this.updateStatus.bind(null, 'denied') },
                n.default.createElement('button', null, 'Deny')
              ),
              n.default.createElement(
                'td',
                null,
                n.default.createElement('textarea', {
                  ref: 'managerNotes',
                  defaultValue: this.props.record.managerNotes,
                })
              )
            );
          },
        }),
        m = n.default.createClass({
          displayName: 'StaffingPointsTable',
          render: function() {
            var e = this.props.records.filter(function(e) {
                var t =
                    -1 !==
                    e.fullName
                      .toUpperCase()
                      .indexOf(this.props.nameFilter.toUpperCase()),
                  a = void 0;
                a =
                  'all' === this.props.departmentFilter ||
                  e.department.toUpperCase() ===
                    this.props.departmentFilter.toUpperCase();
                var l = void 0;
                l =
                  'all' === this.props.statusFilter ||
                  e.status.toUpperCase() ===
                    this.props.statusFilter.toUpperCase();
                var r = e.dateCompleted > this.props.beginDateFilter,
                  n = e.dateCompleted < this.props.endDateFilter;
                return l && a && t && r && n;
              }, this),
              t = e.map(function(e) {
                return n.default.createElement(c, {
                  key: e._id,
                  record: e,
                  password: this.props.password,
                  ajaxUpdateStatus: this.props.updateStatus,
                });
              }, this);
            return n.default.createElement(
              'table',
              null,
              n.default.createElement(
                'thead',
                null,
                n.default.createElement(
                  'tr',
                  null,
                  n.default.createElement('th', null, 'Full Name'),
                  n.default.createElement('th', null, 'Points'),
                  n.default.createElement('th', null, 'Description'),
                  n.default.createElement('th', null, 'Department'),
                  n.default.createElement('th', null, 'Completion Date'),
                  n.default.createElement('th', null, 'Notes'),
                  n.default.createElement('th', null, 'Status'),
                  n.default.createElement('th', null, 'Approve'),
                  n.default.createElement('th', null, 'Deny'),
                  n.default.createElement('th', null, 'Manager Notes')
                )
              ),
              n.default.createElement('tbody', null, t)
            );
          },
        }),
        f = n.default.createClass({
          displayName: 'StaffingPointsView',
          getInitialState: function() {
            return {
              nameFilter: '',
              departmentFilter: 'all',
              statusFilter: 'all',
              beginDateFilter: new Date('January 1, 2016'),
              endDateFilter: new Date(),
              password: '',
              statusMessage: '',
              records: [],
            };
          },
          componentDidMount: function() {
            var e = this;
            $.get('points', function(t) {
              t.forEach(function(e) {
                e.dateCompleted = new Date(e.dateCompleted);
              }),
                e.setState({ records: t });
            });
          },
          updatePassword: function() {
            this.setState({ password: this.refs.passwordInput.value });
          },
          updateStatus: function(e, t, a) {
            if ('incorrect password' !== e) {
              for (var l = -1, r = 0; r < this.state.records.length; r++)
                this.state.records[r]._id === a && (l = r);
              var n = this.state.records[l],
                s = JSON.parse(JSON.stringify(n));
              (s.dateCompleted = new Date(s.dateCompleted)), (s.status = t);
              var u = [
                this.state.records.slice(0, l),
                s,
                this.state.records.slice(l + 1, this.state.records.length),
              ];
            } else var u = this.state.records;
            this.setState({ records: u, statusMessage: e });
          },
          handleFilterChange: function(e) {
            this.setState(e);
          },
          render: function() {
            return n.default.createElement(
              'div',
              null,
              n.default.createElement(
                'h1',
                { id: 'header' },
                'Staffing Points'
              ),
              n.default.createElement('h4', null, this.state.statusMessage),
              n.default.createElement(
                'div',
                { className: 'row' },
                n.default.createElement(
                  'div',
                  { className: 'col-md-4 col-md-offset-8 ' },
                  n.default.createElement(
                    'div',
                    { className: 'form-group' },
                    n.default.createElement(
                      'h3',
                      null,
                      'Super Secret Password'
                    ),
                    n.default.createElement('input', {
                      type: 'password',
                      name: 'password',
                      className: 'form-control',
                      onChange: this.updatePassword,
                      ref: 'passwordInput',
                    })
                  )
                )
              ),
              n.default.createElement(
                'div',
                { className: 'row' },
                n.default.createElement(
                  'div',
                  { className: 'col-md-3' },
                  n.default.createElement(d, {
                    filterName: this.state.nameFilter,
                    handleFilterChange: this.handleFilterChange,
                  })
                ),
                n.default.createElement(
                  'div',
                  { className: 'col-md-3' },
                  n.default.createElement(i, {
                    beginDate: this.state.beginDateFilter,
                    endDate: this.state.endDateFilter,
                    handleFilterChange: this.handleFilterChange,
                  })
                ),
                n.default.createElement(
                  'div',
                  { className: 'col-md-3' },
                  n.default.createElement(o, {
                    handleFilterChange: this.handleFilterChange,
                  })
                ),
                n.default.createElement(
                  'div',
                  { className: 'col-md-3' },
                  n.default.createElement(p, {
                    handleFilterChange: this.handleFilterChange,
                  })
                )
              ),
              n.default.createElement(m, {
                records: this.state.records,
                nameFilter: this.state.nameFilter,
                departmentFilter: this.state.departmentFilter,
                statusFilter: this.state.statusFilter,
                beginDateFilter: this.state.beginDateFilter,
                endDateFilter: this.state.endDateFilter,
                password: this.state.password,
                updateStatus: this.updateStatus,
              })
            );
          },
        });
      u.default.render(
        n.default.createElement(f, null),
        document.getElementById('container')
      );
    },
  },
  [725]
);
